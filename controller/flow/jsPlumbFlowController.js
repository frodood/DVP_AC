/** * Created by Damith on 2/28/2017. */(function () {    mainApp.controller('jsPlumbFlowController', function ($scope, ticketFlowService, $timeout,$anchorScroll) {        $anchorScroll();        $scope.safeApply = function(fn) {            var phase = this.$root.$$phase;            if(phase == '$apply' || phase == '$digest') {                if(fn && (typeof(fn) === 'function')) {                    fn();                }            } else {                this.$apply(fn);            }        };        $scope.showAlert = function (title, content, type) {            new PNotify({                title: title,                text: content,                type: type,                styling: 'bootstrap3'            });        };        $scope.showConfirm = function (tittle, label, okbutton, cancelbutton, content, OkCallback, CancelCallBack, okObj) {            (new PNotify({                title: tittle,                text: content,                icon: 'glyphicon glyphicon-question-sign',                hide: false,                confirm: {                    confirm: true                },                buttons: {                    closer: false,                    sticker: false                },                history: {                    history: false                }            })).get().on('pnotify.confirm', function () {                    OkCallback("confirm");                }).on('pnotify.cancel', function () {                });        };        $scope.nodes = [];        $scope.selectedTicketType = null;        $scope.statusFlow = null;        var filterObjFromArray = function (objArray, field, value) {            var resultObj = undefined;            if (Array.isArray(objArray)) {                objArray.forEach(function (obj) {                    if (obj[field] === value) {                        resultObj = obj;                    }                });            }            return resultObj;        };        var getAllStatusNodes = function () {            ticketFlowService.getAllStatusNodes().then(function (res) {                //var connections = [];                if (res.data.IsSuccess && res.status == '200') {                    // var connection = [];                    $scope.ticketStatus = res.data.Result                }            }, function (err) {                console.log(err);            });        };        getAllStatusNodes();        var getAllFlowTypes = function () {            ticketFlowService.getAvailableTicketTypes().then(function (res) {                //var connections = [];                if (res.data.IsSuccess && res.status == '200') {                    // var connection = [];                    $scope.types = res.data.Result                }            }, function (err) {                console.log(err);            });        };        getAllFlowTypes();        function filter(itemArray, criteria) {            return itemArray.filter(function (obj) {                return obj.name == criteria;            });        }        var getFlowConnections = function (flowType, callback) {            ticketFlowService.getFlowConnections(flowType).then(function (res) {                //var connections = [];                if (res.data.IsSuccess && res.status == '200') {                    // var connection = [];                    $scope.connections = res.data.Result.map(function (item) {                        return {                            source: filter($scope.nodes, item.source.name)[0],                            target: filter($scope.nodes, item.targets.name)[0]                        }                    });                    $scope.connections.reverse();                    console.log($scope.connections);                    callback($scope.connections);                } else {                    $scope.connections = [];                    callback($scope.connections);                }            }, function (err) {                console.log(err);                $scope.connections = [];                callback($scope.connections);            });        };        var getFlowNodes = function (flowType, callback) {            ticketFlowService.getFlowNodes(flowType).then(function (res) {                //var connections = [];                if (res.data.IsSuccess && res.status == '200') {                    // var connection = [];                    $scope.nodes = res.data.Result.map(function (item) {                        return {                            _id: item._id,                            nodeId: item.node._id,                            name: item.node.name,                            position: item.position                        }                    });                    callback($scope.nodes);                    //console.log($scope.nodes);                    // get current node connections                    //getFlowConnections($scope.selectedTicketType);                } else {                    // $scope.nodes = [];                    callback([]);                }            }, function (err) {                console.log(err);                callback([]);            });        };        $(document).ready(function () {            jsPlumb.ready(function () {                var instance = window.jsp = jsPlumb.getInstance({                    // default drag options                    DragOptions: {cursor: 'pointer', zIndex: 2000},                    // the overlays to decorate each connection with.  note that the label overlay uses a function to generate the label text; in this                    // case it returns the 'labelText' member that we set on each connection in the 'init' method below.                    ConnectionOverlays: [                        ["Arrow", {                            location: 1,                            visible: true,                            width: 11,                            length: 11,                            id: "ARROW",                            events: {                                click: function () {                                    //alert("you clicked on the arrow overlay")                                }                            }                        }],                        ["Label", {                            location: 0.1,                            id: "label",                            cssClass: "aLabel",                            events: {                                tap: function () {                                    //alert("hey");                                }                            }                        }]                    ],                    Container: "canvas"                });                var basicType = {                    connector: "StateMachine",                    paintStyle: {stroke: "red", strokeWidth: 4},                    hoverPaintStyle: {stroke: "blue"},                    overlays: [                        "Arrow"                    ]                };                instance.registerConnectionType("basic", basicType);                // this is the paint style for the connecting lines..                var connectorPaintStyle = {                        strokeWidth: 2,                        stroke: "#61B7CF",                        joinstyle: "round",                        outlineStroke: "white",                        outlineWidth: 2                    },                // .. and this is the hover style.                    connectorHoverStyle = {                        strokeWidth: 3,                        stroke: "#216477",                        outlineWidth: 5,                        outlineStroke: "white"                    },                    endpointHoverStyle = {                        fill: "#216477",                        stroke: "#216477"                    },                // the definition of source endpoints (the small blue ones)                    sourceEndpoint = {                        endpoint: "Dot",                        paintStyle: {                            stroke: "#7AB02C",                            fill: "transparent",                            radius: 7,                            strokeWidth: 1                        },                        maxConnections: -1,                        isSource: true,                        connector: ["Flowchart", {                            stub: [40, 60],                            gap: 10,                            cornerRadius: 5,                            alwaysRespectStubs: true                        }],                        connectorStyle: connectorPaintStyle,                        hoverPaintStyle: endpointHoverStyle,                        connectorHoverStyle: connectorHoverStyle,                        dragOptions: {},                        overlays: [                            ["Label", {                                location: [0.5, 1.5],                                label: "Drag",                                cssClass: "endpointSourceLabel",                                visible: false                            }]                        ]                    },                // the definition of target endpoints (will appear when the user drags a connection)                    targetEndpoint = {                        endpoint: "Dot",                        paintStyle: {fill: "#7AB02C", radius: 7},                        hoverPaintStyle: endpointHoverStyle,                        maxConnections: -1,                        dropOptions: {hoverClass: "hover", activeClass: "active"},                        isTarget: true,                        overlays: [                            ["Label", {                                location: [0.5, -0.5],                                label: "Drop",                                cssClass: "endpointTargetLabel",                                visible: false                            }]                        ]                    },                    init = function (connection) {                        var sourceConn = $scope.nodes.filter(function (srcConn) {                            if("flowchart"+srcConn.nodeId === connection.sourceId){                                return srcConn;                            }                        });                        var targetConn = $scope.nodes.filter(function (tarConn) {                            if("flowchart"+tarConn.nodeId === connection.targetId){                                return tarConn;                            }                        });                        if(sourceConn && targetConn && sourceConn.length >0 && targetConn.length>0)                        connection.getOverlay("label").setLabel(sourceConn[0].name + "-" + targetConn[0].name);                    };                var _addEndpoints = function (toId, sourceAnchors, targetAnchors) {                    for (var i = 0; i < sourceAnchors.length; i++) {                        var sourceUUID = toId + sourceAnchors[i];                        instance.addEndpoint("flowchart" + toId, sourceEndpoint, {                            anchor: sourceAnchors[i], uuid: sourceUUID                        });                    }                    for (var j = 0; j < targetAnchors.length; j++) {                        var targetUUID = toId + targetAnchors[j];                        instance.addEndpoint("flowchart" + toId, targetEndpoint, {                            anchor: targetAnchors[j],                            uuid: targetUUID                        });                    }                };                // suspend drawing and initialise.                var loadJsFlow = function () {                    instance.batch(function () {                        getFlowNodes($scope.selectedTicketType, function (nodes) {                            $scope.nodes = nodes;                            getFlowConnections($scope.selectedTicketType, function (connections) {                                $timeout(function () {                                    nodes.forEach(function (node) {                                        _addEndpoints(node.nodeId, ["BottomCenter"], ["TopCenter"]);                                    });                                    instance.bind("connection", function (connInfo, originalEvent) {                                        init(connInfo.connection);                                    });                                    instance.draggable(jsPlumb.getSelector(".flowchart-demo .window"),{                                        drag: function() {                                            console.log("drag hit");                                            // Your code                                        },                                        stop: function(event, ui) {                                            console.log("drag stop hit");                                            if(event && event.el && event.el.id) {                                                var dragedNodeId = event.el.id;                                                var newPosition = event.pos;                                                var dragedNodes = $scope.nodes.filter(function (node) {                                                    if("flowchart"+node.nodeId === dragedNodeId){                                                        return node;                                                    }                                                });                                                if(dragedNodes && dragedNodes.length >0){                                                    dragedNodes[0].position = newPosition.reverse();                                                }                                            }                                        }                                    });                                    connections.forEach(function (flowConn) {                                        var source = flowConn.source.nodeId + "BottomCenter";                                        var target = flowConn.target.nodeId + "TopCenter";                                        instance.connect({uuids: [source, target], editable: true});                                    });                                    //instance.connect({uuids: ["newBottomCenter", "openTopCenter"], editable: true});                                    //instance.connect({uuids: ["openLeftMiddle", "closedTopCenter"], editable: true});                                    instance.bind("endpointDblClick", function (endpoint, originalEvent) {                                        // if (confirm("Delete connection from " + conn.sourceId + " to " + conn.targetId + "?"))                                        //   instance.detach(conn);                                        console.log("endpointDblClick");                                    });                                    instance.bind("click", function (conn, originalEvent) {                                        // if (confirm("Delete connection from " + conn.sourceId + " to " + conn.targetId + "?"))                                        //   instance.detach(conn);                                        conn.toggleType("basic");                                    });                                    instance.bind("connectionDrag", function (connection) {                                        console.log("connection " + connection.id + " is being dragged. suspendedElement is ", connection.suspendedElement, " of type ", connection.suspendedElementType);                                    });                                    instance.bind("connectionDragStop", function (connection) {                                        console.log("connection " + connection.id + " was dragged");                                        if(connection.source && connection.target) {                                            if(connection.sourceId !== connection.targetId){                                                var sourceConn = $scope.nodes.filter(function (srcConn) {                                                    if("flowchart"+srcConn.nodeId === connection.sourceId){                                                        return srcConn;                                                    }                                                });                                                var targetConn = $scope.nodes.filter(function (trgConn) {                                                    if("flowchart"+trgConn.nodeId === connection.targetId){                                                        return trgConn;                                                    }                                                });                                                if (sourceConn && targetConn && sourceConn.length > 0 && targetConn.length > 0) {                                                    var newConnection = {                                                        source: sourceConn[0],                                                        target: targetConn[0]                                                    };                                                    if($scope.connections.indexOf(newConnection) === -1){                                                        $scope.connections.push(newConnection);                                                    }                                                }                                            }else{                                                instance.detach(connection);                                            }                                        }else {                                            $scope.connections.forEach(function (flowConn, index) {                                                if("flowchart"+flowConn.source.nodeId === connection.sourceId && "flowchart"+flowConn.target.nodeId === connection.targetId){                                                    $scope.connections.splice(index,1);                                                }                                            });                                        }                                    });                                    instance.bind("connectionMoved", function (params) {                                        console.log("connection " + params.connection.id + " was moved");                                    });                                }, 100);                            });                        });                    });                    jsPlumb.fire("jsPlumbDemoLoaded", instance);                };                $scope.selectedTicketType = null;                $scope.statusFlow = null;                $scope.selectedNewNode = null;                $scope.changeTicketType = function () {                    if ($scope.selectedTicketType) {                        //is check flow status                        //disableBucket();                        ticketFlowService.getFlowStatus($scope.selectedTicketType).then(function (res) {                         if (res.data && res.data.IsSuccess) {                         if (!res.data.Result) {                         //create  new nodes                         //create new flow                         var flowObj = {                         "type": $scope.selectedTicketType,                         "flow_nodes": [],                         "flow_connections": []                         };                         //crate new flow                         ticketFlowService.createNewFlow(flowObj).then(function (res) {                         if (res.data && res.data.IsSuccess) {                         if (res.data.Result) {                         $scope.statusFlow = res.data.Result;                         }                         console.log(res);                         }                         }, function (err) {                         console.log(err);                         });                         } else {                         $scope.statusFlow = res.data.Result;                         }                         } else {                         $scope.statusFlow = null;                         }                         }, function (err) {                            console.log(err);                        });                        $('.window').html('');                        instance.detachEveryConnection();                        instance.deleteEveryEndpoint();                        $scope.nodes = [];                        loadJsFlow();                    }                };                $scope.addNewNode = function () {                    var selectedNodeObj = JSON.parse($scope.selectedNewNode);                    var isNodeAdded = filterObjFromArray($scope.nodes, 'nodeId', selectedNodeObj._id);                    if (!isNodeAdded) {                        $scope.nodes.push(                            {                                _id: selectedNodeObj.name,                                nodeId: selectedNodeObj._id,                                name: selectedNodeObj.name,                                position: [50, 50]                            }                        );                        $timeout(function () {                            _addEndpoints(selectedNodeObj._id, ["BottomCenter"], ["TopCenter"]);                            instance.draggable(jsPlumb.getSelector(".flowchart-demo .window"),{                                drag: function() {                                    console.log("drag hit");                                    // Your code                                },                                stop: function(event, ui) {                                    if(event && event.el && event.el.id) {                                        var dragedNodeId = event.el.id;                                        var newPosition = event.pos;                                        var dragedNodes = $scope.nodes.filter(function (node) {                                            if("flowchart"+node.nodeId === dragedNodeId){                                                return node;                                            }                                        });                                        if(dragedNodes && dragedNodes.length >0){                                            dragedNodes[0].position = newPosition.reverse();                                        }                                    }                                }                            });                        },100);                        var newFNode = {flow_node: selectedNodeObj._id, position: [50, 50]};                        if ($scope.statusFlow) {                            ticketFlowService.putFlowNode($scope.statusFlow._id, newFNode).then(function (res) {                                if (res.data && res.data.IsSuccess) {                                    console.log(res.data);                                }                            }, function (err) {                                console.log(err);                            });                        }                    } else {                        $scope.showAlert("Flow Node", "Node Already Added", "error");                    }                };                $scope.saveFlow = function () {                    if ($scope.statusFlow) {                        var flowObj = {                            type: $scope.statusFlow.type,                            flow_nodes: [],                            flow_connections: []                        };                        if ($scope.nodes) {                            flowObj.flow_nodes = $scope.nodes.map(function (node) {                                return {                                    node: node.nodeId,                                    position: node.position                                }                            });                        }                        if ($scope.connections) {                            flowObj.flow_connections = $scope.connections.map(function (conn) {                                return {                                    source: conn.source.nodeId,                                    targets: conn.target.nodeId                                }                            });                        }                        ticketFlowService.createNewFlow(flowObj).then(function (res) {                            if (res.data && res.data.IsSuccess) {                                //if (res.data.Result) {                                //    $scope.statusFlow = res.data.Result;                                //}                                $scope.showAlert("Success", res.data.CustomMessage, "success");                            } else {                                console.log(res);                                $scope.showAlert("Error", "Error in saving", "error");                                console.log("Error in response")                            }                        }, function (err) {                            $scope.showAlert("Error", "Error in saving", "error");                            console.log("Exception in request ", err);                        });                    } else {                        console.log("Flow not found");                    }                };                $scope.removeNodeFromFlow = function(nodeId){                    $scope.showConfirm("Delete Flow Node", "Delete", "ok", "cancel", "Do you want to delete flow node", function (obj) {                        $scope.nodes.forEach(function (node, index) {                            if(node.nodeId === nodeId){                                $scope.connections.forEach(function (flowConn, index) {                                    if(flowConn.source.nodeId === nodeId || flowConn.target.nodeId === nodeId){                                        $scope.connections.splice(index,1);                                    }                                });                                $scope.safeApply(function() {                                    $scope.nodes.splice(index,1);                                });                                var elementId = 'flowchart'+nodeId;                                instance.remove(elementId);                            }                        });                    }, function () {                    });                };            });        });    });}());