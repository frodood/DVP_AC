/** * Created by Damith on 11/21/2016. */mainApp.controller('ticketFlowCtrl', function ($scope, ticketFlowService,$anchorScroll) {    $anchorScroll();    $scope.nodes = [];    $scope.connections = [];    $scope.types = [];    $scope.ticketStatus = [];    var disableBucket = function () {        $('#removeBucket').addClass('display-none').removeClass('animated bounceIn');    };    $scope.showAlert = function (title, content, type) {        new PNotify({            title: title,            text: content,            type: type,            styling: 'bootstrap3'        });    };    function random_width() {        return Math.floor(Math.random() * (500 - 200) + 200);    }    function random_height() {        return Math.floor(Math.random() * (700 - 200) + 200);    }    function search(nameKey, myArray) {        for (var i = 0; i < myArray.length; i++) {            if (myArray[i].type === 'question') {                return myArray[i];            }        }    }    function notesFunction() {        this.allNodes = function () {            $scope.types = ticketFlowService.getTicketTypesDummy();        }    };    function ticketFun() {        this.ticketStatus = function () {        }    }    var getNotes = new notesFunction();    var ticketFun = new ticketFun();    // getNotes.allNodes();    // ticketFun.ticketStatus();    function getTicketFlow(type) {        ticketFlowService.getTicketFlow().then(function (res) {            //var connections = [];            if (res.data.IsSuccess && res.status == '200') {                // var connection = [];                var connectionsArr = search(type, res.data.Result);                connectionsArr.flow_nodes.forEach(function (item) {                    var objCon = {                        source: item.source.status_node,                        target: item.targets.status_node,                        name: item.source.description                    };                    if (objCon && objCon.source && source.target) {                        $scope.connections.push(objCon);                    }                });                //return connections;            }        }, function (err) {        });    }    function getFlowNodes() {        ticketFlowService.getFlowNotes().then(function (res) {            if (res.data.IsSuccess && res.status == '200') {                //var nodes = [];                res.data.Result.forEach(function (value, key) {                    var node = {                        name: res.data.Result[key]['status_node'],                        position: [random_width(), random_height()]                    };                    $scope.nodes.push(node);                });                //return nodes;            }        }, function (err) {        });    };    /*$scope.nodes = [     {name: 'Node 1', position: [10, 10]},     {name: 'Node 2', position: [100, 100]},     {name: 'Node 3', position: [200, 200]},     {name: 'Node 4', position: [300, 300]}     ];*/    /*$scope.fNodes = [     {     _id: "57d10453939480cc2cdd0885",     description: "System node closed",     status_node: "closed",     node_type: "system"     },     {     _id: "57d103ec939480cc2cdd0880",     description: "System node new",     status_node: "new",     node_type: "system"     },     {     _id: "57d10435939480cc2cdd0881",     description: "System node open",     status_node: "open",     node_type: "system"     }     ]     $scope.setFlowNode = function () {     for (var i = 0; i < $scope.flowNodeResult.Result[0].flow_nodes.length; i++) {     var fNode = $scope.flowNodeResult.Result[0].flow_nodes[i];     $scope.nodes.push(fNode.source);     $scope.nodes.push(fNode.targets);     $scope.connections.push({source: fNode.source, target: fNode.targets, name: 'Named connection'});     }     }     $scope.setFlowNode();*/    //$scope.connections = [{source: 'new', target: ['parked'], name: 'test1'}];    //getFlowNodes();    // this.nodes = [    //     {name: 'Node 1', position: [10, 10]},    //     {name: 'Node 2', position: [100, 100]},    //     {name: 'Node 3', position: [200, 200]},    //     {name: 'Node 4', position: [300, 300]}    // ];    // getTicketFlow('question');    var getAllStatusNodes = function () {        ticketFlowService.getAllStatusNodes().then(function (res) {            //var connections = [];            if (res.data.IsSuccess && res.status == '200') {                // var connection = [];                $scope.ticketStatus = res.data.Result            }        }, function (err) {            console.log(err);        });    };    getAllStatusNodes();    var getAllFlowTypes = function () {        ticketFlowService.getAvailableTicketTypes().then(function (res) {            //var connections = [];            if (res.data.IsSuccess && res.status == '200') {                // var connection = [];                $scope.types = res.data.Result            }        }, function (err) {            console.log(err);        });    };    getAllFlowTypes();    function filterFromNodes(item, value) {        return item.name == value;    }    function filter(itemArray, criteria) {        return itemArray.filter(function (obj) {            return obj.name == criteria;        });    }    //draw flow    var getFlowConnections = function (flowType) {        ticketFlowService.getFlowConnections(flowType).then(function (res) {            //var connections = [];            if (res.data.IsSuccess && res.status == '200') {                // var connection = [];                $scope.connections = res.data.Result.map(function (item) {                    return {                        source: filter($scope.nodes, item.source.name)[0],                        target: filter($scope.nodes, item.targets.name)[0],                        name: filter($scope.nodes, item.source.name)[0].name + "-" + filter($scope.nodes, item.targets.name)[0].name                    }                });                $scope.connections.reverse();                console.log($scope.connections);            } else {                $scope.connections = [];            }        }, function (err) {            console.log(err);        });    };    $scope.nodes = [];    var getFlowNodes = function (flowType) {        ticketFlowService.getFlowNodes(flowType).then(function (res) {            //var connections = [];            if (res.data.IsSuccess && res.status == '200') {                // var connection = [];                $scope.nodes = res.data.Result.map(function (item) {                    return {                        _id: item._id,                        nodeId: item.node._id,                        name: item.node.name,                        position: item.position                    }                });                //console.log($scope.nodes);                // get current node connections                getFlowConnections($scope.selectedTicketType);            } else {                $scope.nodes = [];            }        }, function (err) {            console.log(err);        });    };    $scope.selectedTicketType = null;    $scope.statusFlow = null;    $scope.changeTicketType = function () {        if ($scope.selectedTicketType) {            //is check flow status            disableBucket();            ticketFlowService.getFlowStatus($scope.selectedTicketType).then(function (res) {                if (res.data && res.data.IsSuccess) {                    if (!res.data.Result) {                        //create  new nodes                        //create new flow                        var flowObj = {                            "type": $scope.selectedTicketType,                            "flow_nodes": [],                            "flow_connections": []                        };                        //crate new flow                        ticketFlowService.createNewFlow(flowObj).then(function (res) {                            if (res.data && res.data.IsSuccess) {                                if (res.data.Result) {                                    $scope.statusFlow = res.data.Result;                                }                                console.log(res);                            }                        }, function (err) {                            console.log(err);                        });                    } else {                        $scope.statusFlow = res.data.Result;                    }                } else {                    $scope.statusFlow = null;                }            }, function (err) {                console.log(err);            });            getFlowNodes($scope.selectedTicketType);        }    };    var filterObjFromArray = function (objArray, field, value) {        var resultObj = undefined;        if (Array.isArray(objArray)) {            objArray.forEach(function (obj) {                if (obj[field] === value) {                    resultObj = obj;                }            });        }        return resultObj;    };    //add new node    $scope.selectedNewNode = null;    $scope.addNewNode = function () {        var selectedNodeObj = JSON.parse($scope.selectedNewNode);        var isNodeAdded = filterObjFromArray($scope.nodes, 'nodeId', selectedNodeObj._id);        if (!isNodeAdded) {            $scope.nodes.push(                {                    _id: selectedNodeObj.name,                    nodeId: selectedNodeObj._id,                    name: selectedNodeObj.name,                    position: [50, 50]                }            );            var newFNode = {flow_node: selectedNodeObj._id, position: [50, 50]};            if ($scope.statusFlow) {                ticketFlowService.putFlowNode($scope.statusFlow._id, newFNode).then(function (res) {                    if (res.data && res.data.IsSuccess) {                        console.log(res.data);                    }                }, function (err) {                    console.log(err);                });            }        } else {            $scope.showAlert("Flow Node", "Node Already Added", "error");        }    };    $scope.saveFlow = function () {        if ($scope.statusFlow) {            var flowObj = {                type: $scope.statusFlow.type,                flow_nodes: [],                flow_connections: []            };            if ($scope.nodes) {                flowObj.flow_nodes = $scope.nodes.map(function (node) {                    return {                        node: node.nodeId,                        position: node.position                    }                });            }            if ($scope.connections) {                flowObj.flow_connections = $scope.connections.map(function (conn) {                    return {                        source: conn.source.nodeId,                        targets: conn.target.nodeId                    }                });            }            ticketFlowService.createNewFlow(flowObj).then(function (res) {                if (res.data && res.data.IsSuccess) {                    //if (res.data.Result) {                    //    $scope.statusFlow = res.data.Result;                    //}                    $scope.showAlert("Success", res.data.CustomMessage, "success");                } else {                    console.log(res);                    $scope.showAlert("Error", "Error in saving", "error");                    console.log("Error in response")                }            }, function (err) {                $scope.showAlert("Error", "Error in saving", "error");                console.log("Exception in request ", err);            });        } else {            console.log("Flow not found");        }    };    $scope.checkValue = function () {        console.log($scope.nodes);        console.log($scope.connections);    };    $scope.removeConnection = function (conn) {        for (var i = 0; i < $scope.connections.length; i++) {            if ($scope.connections[i].name === conn.name) {                $scope.connections.splice(i, 1);                break;            }        }        console.log('---------------------------------');        console.log(conn);    };    //Remove bucket event    var mouseX;    var mouseY;    $(document).mousemove(function (e) {        mouseX = e.pageX;        mouseY = e.pageY;    });    var _selected_node = null;    $scope.removeNode = function (node) {        if (node) {            for (var i = 0; i < $scope.nodes.length; i++) {                if ($scope.nodes[i].name === node.name) {                    $('#removeBucket').removeClass('display-none').addClass('animated bounceIn');                    $('#removeBucket').css({'top': mouseY, 'left': mouseX}).fadeIn('slow');                    _selected_node = node;                    break;                }            }        }    };    // remove current select node    $scope.removeSelectedNode = function () {        if (_selected_node) {            (new PNotify({                title: 'Are you sure',                text: 'Are sure delete this <b>' + _selected_node.name + '</b> node ?',                icon: 'fa fa-question-circle',                hide: false,                confirm: {                    confirm: true                },                buttons: {                    closer: false,                    sticker: false                },                history: {                    history: false                }            })).get().on('pnotify.confirm', function () {                    for (var i = 0; i < $scope.nodes.length; i++) {                        if ($scope.nodes[i].name === _selected_node.name) {                            var connectionsToRemove = [];                            $scope.connections.forEach(function (connection) {                                if (connection.source.nodeId === $scope.nodes[i].nodeId || connection.target.nodeId === $scope.nodes[i].nodeId) {                                    //$scope.connections.splice(j, 1);                                    connectionsToRemove.push(connection);                                }                            });                            connectionsToRemove.forEach(function (conToRemove) {                                var connIndex = $scope.connections.indexOf(conToRemove);                                if (connIndex > -1) {                                    $scope.connections.splice(connIndex, 1);                                }                            });                            $scope.nodes.splice(i, 1);                            $scope.showAlert("Success", "Delete Node Success.", "success");                            break;                        }                        disableBucket();                    }                }).on('pnotify.cancel', function () {                    disableBucket();                });        } else {            //please selected node            $scope.showAlert("Error", "Please Select Node.", "success");        }    };    $scope.closeBucket = function () {        disableBucket();    }        });